allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    ext {
        profile=project.hasProperty('profile')? (project['profile']==""?"aic-dev":project['profile']) : "aic-dev"
        moduleVersion = "1.0-SNAPSHOT"
        optBaseVersion = "1.0.1-SNAPSHOT"
        builtBy = "gradle 2.2"

        publishUserName = "runnerdev"
        publishUserPassword = "runnerdev"
        publishURL = "http://10.1.228.199:18081/nexus/content/repositories/snapshots/"

        mavenPublicURL = "http://10.1.228.199:18081/nexus/content/groups/public/"
    	//长虹仓库
    //   publishUserName = "admin"
    //   publishUserPassword = "admin123"
     //   publishURL = "http://202.98.157.5:8003/nexus/content/repositories/upSnapshots/"
     //   mavenPublicURL = "http://202.98.157.5:8003/nexus/content/groups/public/"
    
    }
    compileJava.dependsOn clean
    sourceCompatibility = 1.7

    configurations.all {
	    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
	    exclude group: 'log4j', module: 'log4j'
	    exclude group: "org.slf4j", module: "slf4j-log4j12"
	    exclude group: "org.slf4j", module: "log4j-over-slf4j"
	    
	    exclude group: 'com.sun.jersey', module: 'jersey-core'
        exclude group: 'com.sun.jersey', module: 'jersey-json'
        exclude group: 'com.sun.jersey', module: 'jersey-server'
        exclude group: 'com.sun.jersey', module: 'jersey-servlet'
        
        exclude group: 'org.eclipse.jetty.aggregate', module: 'jetty-all-server'
	}
    group="com.ai.slp.order"
}

subprojects {
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories { maven { url mavenPublicURL } }

    sourceSets {
        main {
            java {
                srcDirs = [
                        'src/main/java'
                ]
            }
            resources { srcDirs = ['src/main/resources']}
        }
        test {
            java {
                srcDirs = [
                        'src/test/java'
                ]
            }
            resources { srcDirs = ['src/test/resources']}
        }
    }

    dependencies {
        compile "com.ai.opt:opt-base:${optBaseVersion}"
        compile 'javax.validation:validation-api:1.1.0.Final'
        compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    }
}

project("order-api") {
    project.ext {
        appName = "order-api"
        apiDir =  "src/main/java/com/ai/slp/order/api/"
    }

    jar {
        baseName appName
        version moduleVersion
        manifest {
            attributes 'packageName': appName, 'Built-By': builtBy, 'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
        }
    }
    publish.dependsOn build
}

project("order-core") {
    project.ext { appName = "order-core" }

    jar {
        baseName appName
        version moduleVersion
        include "com/ai/slp/order/*/**"
        manifest {
            attributes 'packageName': appName, 'Built-By': builtBy, 'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
        }
    }
}

jar {
    baseName baseName
    version moduleVersion
    destinationDir file("$buildDir/m-libs/")
    manifest {
        attributes 'packageName': baseName, 'Built-By': builtBy, 'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
    }
}

configure(subprojects) { subproject ->
    task sourcesJar(type: Jar, dependsOn:classes) { from sourceSets.main.output }
    artifacts { archives sourcesJar }
}
task copySubProjectsJar(type: Copy) {
    subprojects.each { subproject ->
        from subproject.jar
        destinationDir file("$buildDir/libs/core-libs")
    }
}
task copy3rdJars(type: Copy) {
    subprojects.each { subproject ->
        from subproject.configurations.runtime
        exclude "order-api-*.*"
        destinationDir file("$buildDir/libs/3rd-libs")
    }
}

task copySubProjectsConfig(type: Copy) {
    subprojects.each { subproject ->
        from subproject.fileTree(dir: 'src/main/resources')+subproject.fileTree(dir: 'profile/'+profile)
        destinationDir file("$buildDir/config")
    }
}

task zipLibs(type: Zip) {
    baseName "libs"
    from "$buildDir/libs"
}

task zipConfig(type: Zip) {
    baseName "config"
    from "$buildDir/config"
}


build.dependsOn copySubProjectsJar,copy3rdJars,copySubProjectsConfig

