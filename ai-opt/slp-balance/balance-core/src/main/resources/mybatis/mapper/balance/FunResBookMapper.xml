<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ai.slp.balance.dao.mapper.interfaces.FunResBookMapper" >
  <resultMap id="BaseResultMap" type="com.ai.slp.balance.dao.mapper.bo.FunResBook" >
    <id column="book_id" property="bookId" jdbcType="BIGINT" />
    <result column="tenant_id" property="tenantId" jdbcType="VARCHAR" />
    <result column="owner_id" property="ownerId" jdbcType="BIGINT" />
    <result column="owner_type" property="ownerType" jdbcType="INTEGER" />
    <result column="subject_id" property="subjectId" jdbcType="BIGINT" />
    <result column="resource_type" property="resourceType" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="effect_time" property="effectTime" jdbcType="TIMESTAMP" />
    <result column="expire_time" property="expireTime" jdbcType="TIMESTAMP" />
    <result column="total_amount" property="totalAmount" jdbcType="DECIMAL" />
    <result column="deduct_amount" property="deductAmount" jdbcType="DECIMAL" />
    <result column="present_amount" property="presentAmount" jdbcType="DECIMAL" />
    <result column="exchange_amount" property="exchangeAmount" jdbcType="DECIMAL" />
    <result column="book_status" property="bookStatus" jdbcType="VARCHAR" />
    <result column="allow_present" property="allowPresent" jdbcType="INTEGER" />
    <result column="allow_convert" property="allowConvert" jdbcType="INTEGER" />
    <result column="allow_clear" property="allowClear" jdbcType="INTEGER" />
    <result column="source_type" property="sourceType" jdbcType="INTEGER" />
    <result column="source_id" property="sourceId" jdbcType="BIGINT" />
    <result column="use_version" property="useVersion" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    book_id, tenant_id, owner_id, owner_type, subject_id, resource_type, create_time, 
    effect_time, expire_time, total_amount, deduct_amount, present_amount, exchange_amount, 
    book_status, allow_present, allow_convert, allow_clear, source_type, source_id, use_version
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBookCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from fun_res_book
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="Long" >
    select 
    <include refid="Base_Column_List" />
    from fun_res_book
    where book_id = #{bookId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Long" >
    delete from fun_res_book
    where book_id = #{bookId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBookCriteria" >
    delete from fun_res_book
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBook" >
    insert into fun_res_book (book_id, tenant_id, owner_id, 
      owner_type, subject_id, resource_type, 
      create_time, effect_time, expire_time, 
      total_amount, deduct_amount, present_amount, 
      exchange_amount, book_status, allow_present, 
      allow_convert, allow_clear, source_type, 
      source_id, use_version)
    values (#{bookId,jdbcType=BIGINT}, #{tenantId,jdbcType=VARCHAR}, #{ownerId,jdbcType=BIGINT}, 
      #{ownerType,jdbcType=INTEGER}, #{subjectId,jdbcType=BIGINT}, #{resourceType,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{effectTime,jdbcType=TIMESTAMP}, #{expireTime,jdbcType=TIMESTAMP}, 
      #{totalAmount,jdbcType=DECIMAL}, #{deductAmount,jdbcType=DECIMAL}, #{presentAmount,jdbcType=DECIMAL}, 
      #{exchangeAmount,jdbcType=DECIMAL}, #{bookStatus,jdbcType=VARCHAR}, #{allowPresent,jdbcType=INTEGER}, 
      #{allowConvert,jdbcType=INTEGER}, #{allowClear,jdbcType=INTEGER}, #{sourceType,jdbcType=INTEGER}, 
      #{sourceId,jdbcType=BIGINT}, #{useVersion,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBook" >
    insert into fun_res_book
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="bookId != null" >
        book_id,
      </if>
      <if test="tenantId != null" >
        tenant_id,
      </if>
      <if test="ownerId != null" >
        owner_id,
      </if>
      <if test="ownerType != null" >
        owner_type,
      </if>
      <if test="subjectId != null" >
        subject_id,
      </if>
      <if test="resourceType != null" >
        resource_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="effectTime != null" >
        effect_time,
      </if>
      <if test="expireTime != null" >
        expire_time,
      </if>
      <if test="totalAmount != null" >
        total_amount,
      </if>
      <if test="deductAmount != null" >
        deduct_amount,
      </if>
      <if test="presentAmount != null" >
        present_amount,
      </if>
      <if test="exchangeAmount != null" >
        exchange_amount,
      </if>
      <if test="bookStatus != null" >
        book_status,
      </if>
      <if test="allowPresent != null" >
        allow_present,
      </if>
      <if test="allowConvert != null" >
        allow_convert,
      </if>
      <if test="allowClear != null" >
        allow_clear,
      </if>
      <if test="sourceType != null" >
        source_type,
      </if>
      <if test="sourceId != null" >
        source_id,
      </if>
      <if test="useVersion != null" >
        use_version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="bookId != null" >
        #{bookId,jdbcType=BIGINT},
      </if>
      <if test="tenantId != null" >
        #{tenantId,jdbcType=VARCHAR},
      </if>
      <if test="ownerId != null" >
        #{ownerId,jdbcType=BIGINT},
      </if>
      <if test="ownerType != null" >
        #{ownerType,jdbcType=INTEGER},
      </if>
      <if test="subjectId != null" >
        #{subjectId,jdbcType=BIGINT},
      </if>
      <if test="resourceType != null" >
        #{resourceType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="effectTime != null" >
        #{effectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null" >
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalAmount != null" >
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="deductAmount != null" >
        #{deductAmount,jdbcType=DECIMAL},
      </if>
      <if test="presentAmount != null" >
        #{presentAmount,jdbcType=DECIMAL},
      </if>
      <if test="exchangeAmount != null" >
        #{exchangeAmount,jdbcType=DECIMAL},
      </if>
      <if test="bookStatus != null" >
        #{bookStatus,jdbcType=VARCHAR},
      </if>
      <if test="allowPresent != null" >
        #{allowPresent,jdbcType=INTEGER},
      </if>
      <if test="allowConvert != null" >
        #{allowConvert,jdbcType=INTEGER},
      </if>
      <if test="allowClear != null" >
        #{allowClear,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        #{sourceType,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null" >
        #{sourceId,jdbcType=BIGINT},
      </if>
      <if test="useVersion != null" >
        #{useVersion,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBookCriteria" resultType="java.lang.Integer" >
    select count(*) from fun_res_book
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update fun_res_book
    <set >
      <if test="record.bookId != null" >
        book_id = #{record.bookId,jdbcType=BIGINT},
      </if>
      <if test="record.tenantId != null" >
        tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      </if>
      <if test="record.ownerId != null" >
        owner_id = #{record.ownerId,jdbcType=BIGINT},
      </if>
      <if test="record.ownerType != null" >
        owner_type = #{record.ownerType,jdbcType=INTEGER},
      </if>
      <if test="record.subjectId != null" >
        subject_id = #{record.subjectId,jdbcType=BIGINT},
      </if>
      <if test="record.resourceType != null" >
        resource_type = #{record.resourceType,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.effectTime != null" >
        effect_time = #{record.effectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expireTime != null" >
        expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.totalAmount != null" >
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.deductAmount != null" >
        deduct_amount = #{record.deductAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.presentAmount != null" >
        present_amount = #{record.presentAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.exchangeAmount != null" >
        exchange_amount = #{record.exchangeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.bookStatus != null" >
        book_status = #{record.bookStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.allowPresent != null" >
        allow_present = #{record.allowPresent,jdbcType=INTEGER},
      </if>
      <if test="record.allowConvert != null" >
        allow_convert = #{record.allowConvert,jdbcType=INTEGER},
      </if>
      <if test="record.allowClear != null" >
        allow_clear = #{record.allowClear,jdbcType=INTEGER},
      </if>
      <if test="record.sourceType != null" >
        source_type = #{record.sourceType,jdbcType=INTEGER},
      </if>
      <if test="record.sourceId != null" >
        source_id = #{record.sourceId,jdbcType=BIGINT},
      </if>
      <if test="record.useVersion != null" >
        use_version = #{record.useVersion,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update fun_res_book
    set book_id = #{record.bookId,jdbcType=BIGINT},
      tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      owner_id = #{record.ownerId,jdbcType=BIGINT},
      owner_type = #{record.ownerType,jdbcType=INTEGER},
      subject_id = #{record.subjectId,jdbcType=BIGINT},
      resource_type = #{record.resourceType,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      effect_time = #{record.effectTime,jdbcType=TIMESTAMP},
      expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      deduct_amount = #{record.deductAmount,jdbcType=DECIMAL},
      present_amount = #{record.presentAmount,jdbcType=DECIMAL},
      exchange_amount = #{record.exchangeAmount,jdbcType=DECIMAL},
      book_status = #{record.bookStatus,jdbcType=VARCHAR},
      allow_present = #{record.allowPresent,jdbcType=INTEGER},
      allow_convert = #{record.allowConvert,jdbcType=INTEGER},
      allow_clear = #{record.allowClear,jdbcType=INTEGER},
      source_type = #{record.sourceType,jdbcType=INTEGER},
      source_id = #{record.sourceId,jdbcType=BIGINT},
      use_version = #{record.useVersion,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBook" >
    update fun_res_book
    <set >
      <if test="tenantId != null" >
        tenant_id = #{tenantId,jdbcType=VARCHAR},
      </if>
      <if test="ownerId != null" >
        owner_id = #{ownerId,jdbcType=BIGINT},
      </if>
      <if test="ownerType != null" >
        owner_type = #{ownerType,jdbcType=INTEGER},
      </if>
      <if test="subjectId != null" >
        subject_id = #{subjectId,jdbcType=BIGINT},
      </if>
      <if test="resourceType != null" >
        resource_type = #{resourceType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="effectTime != null" >
        effect_time = #{effectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expireTime != null" >
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalAmount != null" >
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="deductAmount != null" >
        deduct_amount = #{deductAmount,jdbcType=DECIMAL},
      </if>
      <if test="presentAmount != null" >
        present_amount = #{presentAmount,jdbcType=DECIMAL},
      </if>
      <if test="exchangeAmount != null" >
        exchange_amount = #{exchangeAmount,jdbcType=DECIMAL},
      </if>
      <if test="bookStatus != null" >
        book_status = #{bookStatus,jdbcType=VARCHAR},
      </if>
      <if test="allowPresent != null" >
        allow_present = #{allowPresent,jdbcType=INTEGER},
      </if>
      <if test="allowConvert != null" >
        allow_convert = #{allowConvert,jdbcType=INTEGER},
      </if>
      <if test="allowClear != null" >
        allow_clear = #{allowClear,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        source_type = #{sourceType,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null" >
        source_id = #{sourceId,jdbcType=BIGINT},
      </if>
      <if test="useVersion != null" >
        use_version = #{useVersion,jdbcType=BIGINT},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ai.slp.balance.dao.mapper.bo.FunResBook" >
    update fun_res_book
    set tenant_id = #{tenantId,jdbcType=VARCHAR},
      owner_id = #{ownerId,jdbcType=BIGINT},
      owner_type = #{ownerType,jdbcType=INTEGER},
      subject_id = #{subjectId,jdbcType=BIGINT},
      resource_type = #{resourceType,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      effect_time = #{effectTime,jdbcType=TIMESTAMP},
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      total_amount = #{totalAmount,jdbcType=DECIMAL},
      deduct_amount = #{deductAmount,jdbcType=DECIMAL},
      present_amount = #{presentAmount,jdbcType=DECIMAL},
      exchange_amount = #{exchangeAmount,jdbcType=DECIMAL},
      book_status = #{bookStatus,jdbcType=VARCHAR},
      allow_present = #{allowPresent,jdbcType=INTEGER},
      allow_convert = #{allowConvert,jdbcType=INTEGER},
      allow_clear = #{allowClear,jdbcType=INTEGER},
      source_type = #{sourceType,jdbcType=INTEGER},
      source_id = #{sourceId,jdbcType=BIGINT},
      use_version = #{useVersion,jdbcType=BIGINT}
    where book_id = #{bookId,jdbcType=BIGINT}
  </update>
</mapper>