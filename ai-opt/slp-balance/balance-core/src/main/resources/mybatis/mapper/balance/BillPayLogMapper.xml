<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ai.slp.balance.dao.mapper.interfaces.BillPayLogMapper" >
  <resultMap id="BaseResultMap" type="com.ai.slp.balance.dao.mapper.bo.BillPayLog" >
    <id column="pay_log_seq" property="payLogSeq" jdbcType="VARCHAR" />
    <result column="tenant_id" property="tenantId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="pay_date" property="payDate" jdbcType="DATE" />
    <result column="pay_fee" property="payFee" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="BIGINT" />
    <result column="rollback_date" property="rollbackDate" jdbcType="DATE" />
    <result column="overdraft" property="overdraft" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    pay_log_seq, tenant_id, user_id, account_id, pay_date, pay_fee, status, rollback_date, 
    overdraft
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLogCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bill_pay_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from bill_pay_log
    where pay_log_seq = #{payLogSeq,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from bill_pay_log
    where pay_log_seq = #{payLogSeq,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLogCriteria" >
    delete from bill_pay_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLog" >
    insert into bill_pay_log (pay_log_seq, tenant_id, user_id, 
      account_id, pay_date, pay_fee, 
      status, rollback_date, overdraft
      )
    values (#{payLogSeq,jdbcType=VARCHAR}, #{tenantId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{accountId,jdbcType=BIGINT}, #{payDate,jdbcType=DATE}, #{payFee,jdbcType=BIGINT}, 
      #{status,jdbcType=BIGINT}, #{rollbackDate,jdbcType=DATE}, #{overdraft,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLog" >
    insert into bill_pay_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="payLogSeq != null" >
        pay_log_seq,
      </if>
      <if test="tenantId != null" >
        tenant_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="payDate != null" >
        pay_date,
      </if>
      <if test="payFee != null" >
        pay_fee,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="rollbackDate != null" >
        rollback_date,
      </if>
      <if test="overdraft != null" >
        overdraft,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="payLogSeq != null" >
        #{payLogSeq,jdbcType=VARCHAR},
      </if>
      <if test="tenantId != null" >
        #{tenantId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="payDate != null" >
        #{payDate,jdbcType=DATE},
      </if>
      <if test="payFee != null" >
        #{payFee,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIGINT},
      </if>
      <if test="rollbackDate != null" >
        #{rollbackDate,jdbcType=DATE},
      </if>
      <if test="overdraft != null" >
        #{overdraft,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLogCriteria" resultType="java.lang.Integer" >
    select count(*) from bill_pay_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bill_pay_log
    <set >
      <if test="record.payLogSeq != null" >
        pay_log_seq = #{record.payLogSeq,jdbcType=VARCHAR},
      </if>
      <if test="record.tenantId != null" >
        tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=BIGINT},
      </if>
      <if test="record.payDate != null" >
        pay_date = #{record.payDate,jdbcType=DATE},
      </if>
      <if test="record.payFee != null" >
        pay_fee = #{record.payFee,jdbcType=BIGINT},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=BIGINT},
      </if>
      <if test="record.rollbackDate != null" >
        rollback_date = #{record.rollbackDate,jdbcType=DATE},
      </if>
      <if test="record.overdraft != null" >
        overdraft = #{record.overdraft,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bill_pay_log
    set pay_log_seq = #{record.payLogSeq,jdbcType=VARCHAR},
      tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=VARCHAR},
      account_id = #{record.accountId,jdbcType=BIGINT},
      pay_date = #{record.payDate,jdbcType=DATE},
      pay_fee = #{record.payFee,jdbcType=BIGINT},
      status = #{record.status,jdbcType=BIGINT},
      rollback_date = #{record.rollbackDate,jdbcType=DATE},
      overdraft = #{record.overdraft,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLog" >
    update bill_pay_log
    <set >
      <if test="tenantId != null" >
        tenant_id = #{tenantId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="payDate != null" >
        pay_date = #{payDate,jdbcType=DATE},
      </if>
      <if test="payFee != null" >
        pay_fee = #{payFee,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=BIGINT},
      </if>
      <if test="rollbackDate != null" >
        rollback_date = #{rollbackDate,jdbcType=DATE},
      </if>
      <if test="overdraft != null" >
        overdraft = #{overdraft,jdbcType=BIGINT},
      </if>
    </set>
    where pay_log_seq = #{payLogSeq,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ai.slp.balance.dao.mapper.bo.BillPayLog" >
    update bill_pay_log
    set tenant_id = #{tenantId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      account_id = #{accountId,jdbcType=BIGINT},
      pay_date = #{payDate,jdbcType=DATE},
      pay_fee = #{payFee,jdbcType=BIGINT},
      status = #{status,jdbcType=BIGINT},
      rollback_date = #{rollbackDate,jdbcType=DATE},
      overdraft = #{overdraft,jdbcType=BIGINT}
    where pay_log_seq = #{payLogSeq,jdbcType=VARCHAR}
  </update>
</mapper>